{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkPermissions = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _PromiseRender = require('./PromiseRender');\n\nvar _PromiseRender2 = _interopRequireDefault(_PromiseRender);\n\nvar _renderAuthorize = require('./renderAuthorize');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n/**\n * 通用权限检查方法\n * Common check permissions method\n * @param { 权限判定 Permission judgment type string |array | Promise | Function } authority\n * @param { 你的权限 Your permission description  type:string} currentAuthority\n * @param { 通过的组件 Passing components } target\n * @param { 未通过的组件 no pass components } Exception\n */\n\n\nvar checkPermissions = function checkPermissions(authority, currentAuthority, target, Exception) {\n  // 没有判定权限.默认查看所有\n  // Retirement authority, return target;\n  if (!authority) {\n    return target;\n  } // 数组处理\n\n\n  if (Array.isArray(authority)) {\n    if (authority.indexOf(currentAuthority) >= 0) {\n      return target;\n    }\n\n    if (Array.isArray(currentAuthority)) {\n      for (var i = 0; i < currentAuthority.length; i += 1) {\n        var element = currentAuthority[i];\n\n        if (authority.indexOf(element) >= 0) {\n          return target;\n        }\n      }\n    }\n\n    return Exception;\n  } // string 处理\n\n\n  if (typeof authority === 'string') {\n    if (authority === currentAuthority) {\n      return target;\n    }\n\n    if (Array.isArray(currentAuthority)) {\n      for (var _i = 0; _i < currentAuthority.length; _i += 1) {\n        var _element = currentAuthority[_i];\n\n        if (authority === _element) {\n          return target;\n        }\n      }\n    }\n\n    return Exception;\n  } // Promise 处理\n\n\n  if (isPromise(authority)) {\n    return _react2.default.createElement(_PromiseRender2.default, {\n      ok: target,\n      error: Exception,\n      promise: authority\n    });\n  } // Function 处理\n\n\n  if (typeof authority === 'function') {\n    try {\n      var bool = authority(currentAuthority); // 函数执行后返回值是 Promise\n\n      if (isPromise(bool)) {\n        return _react2.default.createElement(_PromiseRender2.default, {\n          ok: target,\n          error: Exception,\n          promise: bool\n        });\n      }\n\n      if (bool) {\n        return target;\n      }\n\n      return Exception;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  throw new Error('unsupported parameters');\n};\n\nexports.checkPermissions = checkPermissions;\n\nvar check = function check(authority, target, Exception) {\n  return checkPermissions(authority, _renderAuthorize.CURRENT, target, Exception);\n};\n\nexports.default = check;","map":null,"metadata":{},"sourceType":"script"}